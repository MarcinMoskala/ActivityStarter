buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
  }

  repositories {
    mavenCentral()
  }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'com.github.dcendents.android-maven'

group='com.marcinmoskala'

sourceCompatibility = rootProject.ext.sourceCompatibilityVersion
targetCompatibility = rootProject.ext.targetCompatibilityVersion

def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger)
def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger)
for (File file : sdkHandler.sdkLoader.repositories) {
  repositories.maven {
    url = file.toURI()
  }
}

dependencies {
  implementation project(':activitystarter-annotations')
  implementation deps.kotlin
  implementation deps.autoservice
  implementation deps.autocommon
  implementation deps.javapoet
  compileOnly files(org.gradle.internal.jvm.Jvm.current().getToolsJar())

  testImplementation deps.junit
  testImplementation deps.truth
  testImplementation deps.compiletesting
  testImplementation deps.kotlin_reflect
  testImplementation deps.kotlin_test
  testImplementation deps.kotlin_junit
  testImplementation deps.android
}
repositories {
  mavenCentral()
}
sourceSets {
  main.java.srcDirs += 'src/main/kotlin'
}


// Fancy test print
tasks.withType(Test) {
  testLogging {
    // set options for log level LIFECYCLE
    events "passed", "skipped", "failed", "standardOut"
    showExceptions true
    exceptionFormat "full"
    showCauses true
    showStackTraces true

    // set options for log level DEBUG and INFO
    debug {
      events "started", "passed", "skipped", "failed", "standardOut", "standardError"
      exceptionFormat "full"
    }
    info.events = debug.events
    info.exceptionFormat = debug.exceptionFormat

    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        def startItem = '|  ', endItem = '  |'
        def repeatLength = startItem.length() + output.length() + endItem.length()
        println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
      }
    }
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar
}

install {
  repositories.mavenInstaller {
    pom.project {
      licenses {
        license {
          name 'The Apache Software License, Version 2.0'
          url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          distribution 'repo'
        }
      }
    }
  }
}
